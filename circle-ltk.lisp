(defun rad (degrees)
  (* pi (/ degrees 180.0)))

(defun main (filename)
  (with-ltk ()
    (format-wish "package require Img")
    (let* ((frm (make-instance 'frame))
	  (img (make-image))
	  (c (make-instance 'canvas :height 300 :width 300))
	  (button (make-instance 'button :master frm :text "Go!"))
	  (line (create-line c '(5 10 25 100 50 75))))
      (pack c)
      (pack frm)
      (pack button)
      (image-load img filename)
      (setf my-img (create-image c 0 0 :image img))
      (setf degree-fn (degree-stepper))
      (create-line c '(10 100 100 100))
      (loop repeat 360
	   do
	   (let* ((degree (funcall degree-fn 'cw))
		  (x (cos (rad degree)))
		  (y (sin (rad degree)))
		  (multiplier 80)
		  (offset 100))
	     (set-coords c my-img (list (coord-maker x offset multiplier)
					(coord-maker y offset multiplier)))
	     (sleep .1)
	     (process-events))))))

(defun coord-maker (n offset multiplier)
  (round (+ offset (* multiplier n))))

(defun degree-stepper ()
  (let ((degree 0)
	(direction 'cw))
    (lambda (direction)
      (cond
	((equalp direction 'cw) (if (>= degree 360) 
				    (setf degree 0)
				    (setf degree (+ 5 degree))))
	((equalp direction 'ccw) (if (<= degree 0) 
				     (setf degree 360)
				     (setf degree (- 5 degree))))
	(t nil)))))
