(ql:quickload :lispbuilder-sdl)
(defpackage :sdl-fun
  (:use :common-lisp :sdl)
  (:export :main))

(in-package :sdl-fun)

(defparameter *window-width* 320)
(defparameter *window-height* 320)
(defparameter *zoom-width* 80)
(defparameter *zoom-height* 80)

(defclass cross-hairs ()
  ((x :accessor x :initarg :x :initform 0)
   (y :accessor y :initarg :y :initform 0)
   (zoom-box-visibility :accessor zoom-box-visibility :initarg :zoom-box-visibility :initform :off)))

(defgeneric move-cross-hairs (cross-hairs direction))
(defmethod move-cross-hairs (cross-hairs direction)
    (cond ((and (eq direction :up) (> (y cross-hairs) 0))
	   (decf (y cross-hairs)))
	  ((and (eq direction :down) (< (y cross-hairs) *window-height*))
	   (incf (y cross-hairs)))
	  ((and (eq direction :left) (> (x cross-hairs) 0))
	   (decf (x cross-hairs)))
	  ((and (eq direction :right) (< (x cross-hairs) *window-width*))
	   (incf (x cross-hairs)))))

(defgeneric toggle-zoom-visibility (cross-hairs))
(defun toggle-zoom-visibility (cross-hairs)
  (if (eq (zoom-box-visibility cross-hairs) :off)
      (setf (zoom-box-visibility cross-hairs) :on)
      (setf (zoom-box-visibility cross-hairs) :off)))

(defgeneric draw-cross-hairs (cross-hairs))
(defmethod draw-cross-hairs (cross-hairs)
  (let ((random-color (sdl:color :r (random 255) :g (random 255) :b (random 255))))
  (sdl:draw-vline (x cross-hairs) 0 *window-height* :color sdl:*white*)
  (sdl:draw-hline 0 *window-width* (y cross-hairs) :color sdl:*white*)
  (when (eq (zoom-box-visibility cross-hairs) :on)
    (sdl:draw-box (sdl:rectangle-from-midpoint-* (zoom-horizontal-check (x cross-hairs))
						 (zoom-vertical-check (y cross-hairs))
						 *zoom-width*
						 *zoom-height*)
		  :stroke-color sdl:*white*
		  :color (sdl:color :r 25 :g 50 :b 75 :a 100)))))

(defun zoom-horizontal-check (x)
  (let* ((half-zoom-width (/ *zoom-width* 2))
	(left-boundary half-zoom-width)
	(right-boundary (- *window-width* half-zoom-width)))
    (cond ((< x left-boundary) left-boundary)
	  ((> x right-boundary) right-boundary)
	  (t x))))

(defun zoom-vertical-check (y)
  (let* ((half-zoom-height (/ *zoom-height* 2))
	 (top-boundary half-zoom-height)
	 (bottom-boundary (- *window-height* half-zoom-height)))
    (cond ((< y top-boundary) top-boundary)
	  ((> y bottom-boundary) bottom-boundary)
	  (t y))))

(defun on-key-event (key obj)
  (cond
    ((sdl:key= key :sdl-key-up) (move-cross-hairs obj :up))
    ((sdl:key= key :sdl-key-down) (move-cross-hairs obj :down))
    ((sdl:key= key :sdl-key-left) (move-cross-hairs obj :left)) 
    ((sdl:key= key :sdl-key-right) (move-cross-hairs obj :right))
    ((sdl:key= key :sdl-key-space) (toggle-zoom-visibility obj))
    ((sdl:key= key :sdl-key-escape) (sdl:push-quit-event))))

(defun main ()
  (sdl:with-init ()
    (let ((cross-hairs (make-instance 'cross-hairs :x 160 :y 160))
	  (*random-color* (sdl:color :r (random 255) :g (random 255) :b (random 255))))
      (sdl:window *window-width* *window-height*)
      (sdl:enable-key-repeat 200 10)
      (draw-cross-hairs cross-hairs)
      (sdl:with-events ()
	(:quit-event () t)
	(:key-down-event (:key key)
			 (on-key-event key cross-hairs)
			 (sdl:clear-display sdl:*black*)
			 (draw-cross-hairs cross-hairs))
	(:idle ()
	       (sdl:update-display))))))
		
